package brokers.etrade.services.orderPreview

import com.seansoper.batil.OptionsCalendar
import com.seansoper.batil.brokers.etrade.api.OptionType
import com.seansoper.batil.brokers.etrade.api.OrderActionType
import com.seansoper.batil.brokers.etrade.api.OrderPriceType
import com.seansoper.batil.brokers.etrade.api.OrderType
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewInstrumentOption
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewOrderLimit
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewProductOption
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewRequest
import com.seansoper.batil.brokers.etrade.services.orderPreview.randomString
import java.time.ZonedDateTime

/**
 * @suppress
 */
internal fun createInstruments(
    symbol: String,
    lowerWing: Pair<Float, Float>,
    upperWing: Pair<Float, Float>,
    quantity: Int,
    expiry: ZonedDateTime,
    optionType: OptionType,
    long: Boolean,
): List<PreviewInstrumentOption> {
    require(lowerWing.first < lowerWing.second) { "First strike in lower wing must be less than the second strike" }
    require(lowerWing.second < upperWing.first) { "Second strike in lower wing must be less than strikes in the upper wing" }
    require(upperWing.first < upperWing.second) { "First strike in upper wing must be less than the second strike" }

    val strikes = listOf(lowerWing.toList(), upperWing.toList()).flatten()
    return strikes.mapIndexed { index, strike ->
        val action = if (long) {
            if (index == 0 || index == 3) { OrderActionType.BUY_OPEN } else { OrderActionType.SELL_OPEN }
        } else {
            if (index == 0 || index == 3) { OrderActionType.SELL_OPEN } else { OrderActionType.BUY_OPEN }
        }

        PreviewInstrumentOption(
            orderAction = action,
            quantity = quantity,
            product = PreviewProductOption(
                symbol,
                optionType,
                expiry,
                strike
            )
        )
    }
}

/**
 * Buy a condor with calls
 * @param[symbol] The market symbol for the security being bought
 * @param[lowerWing] A pair of strike prices for the lower wing of the option
 * @param[upperWing] A pair of strike prices for the upper wing of the option
 * @param[limitPrice] The highest price at which to buy the condor calls
 * @param[quantity] The number of condors to buy
 * @param[expiry] The date the condor will expire
 * @param[clientOrderId] A reference ID generated by the developer that is used to ensure that a duplicate order is not being submitted. This reference ID may be any value of 20 or less alphanumeric characters but must be unique within the account. This field does not appear in any API responses.
 */
fun buyCondorCalls(
    symbol: String,
    lowerWing: Pair<Float, Float>,
    upperWing: Pair<Float, Float>,
    limitPrice: Float,
    quantity: Int,
    expiry: ZonedDateTime = OptionsCalendar.nextMonthly(),
    clientOrderId: String = randomString()
): PreviewRequest {
    val instruments = createInstruments(symbol, lowerWing, upperWing, quantity, expiry, OptionType.CALL, true)

    return PreviewRequest(
        orderType = OrderType.CONDOR,
        clientOrderId = clientOrderId,
        orders = listOf(
            PreviewOrderLimit(
                limitPrice = limitPrice,
                priceType = OrderPriceType.NET_DEBIT,
                instruments = instruments
            )
        )
    )
}

/**
 * Buy a condor with puts
 * @param[symbol] The market symbol for the security being bought
 * @param[lowerWing] A pair of strike prices for the lower wing of the option
 * @param[upperWing] A pair of strike prices for the upper wing of the option
 * @param[limitPrice] The highest price at which to buy the condor puts
 * @param[quantity] The number of condors to buy
 * @param[expiry] The date the condor will expire
 * @param[clientOrderId] A reference ID generated by the developer that is used to ensure that a duplicate order is not being submitted. This reference ID may be any value of 20 or less alphanumeric characters but must be unique within the account. This field does not appear in any API responses.
 * @sample com.seansoper.batil.samples.Orders.buyCondorPuts
 */
fun buyCondorPuts(
    symbol: String,
    lowerWing: Pair<Float, Float>,
    upperWing: Pair<Float, Float>,
    limitPrice: Float,
    quantity: Int,
    expiry: ZonedDateTime = OptionsCalendar.nextMonthly(),
    clientOrderId: String = randomString()
): PreviewRequest {
    val instruments = createInstruments(symbol, lowerWing, upperWing, quantity, expiry, OptionType.PUT, true)

    return PreviewRequest(
        orderType = OrderType.CONDOR,
        clientOrderId = clientOrderId,
        orders = listOf(
            PreviewOrderLimit(
                limitPrice = limitPrice,
                priceType = OrderPriceType.NET_DEBIT,
                instruments = instruments
            )
        )
    )
}

/**
 * Sell a condor with calls
 * @param[symbol] The market symbol for the security being bought
 * @param[lowerWing] A pair of strike prices for the lower wing of the option
 * @param[upperWing] A pair of strike prices for the upper wing of the option
 * @param[limitPrice] The highest price at which to sell the condor calls
 * @param[quantity] The number of condors to sell
 * @param[expiry] The date the condor will expire
 * @param[clientOrderId] A reference ID generated by the developer that is used to ensure that a duplicate order is not being submitted. This reference ID may be any value of 20 or less alphanumeric characters but must be unique within the account. This field does not appear in any API responses.
 */
fun sellCondorCalls(
    symbol: String,
    lowerWing: Pair<Float, Float>,
    upperWing: Pair<Float, Float>,
    limitPrice: Float,
    quantity: Int,
    expiry: ZonedDateTime = OptionsCalendar.nextMonthly(),
    clientOrderId: String = randomString()
): PreviewRequest {
    val instruments = createInstruments(symbol, lowerWing, upperWing, quantity, expiry, OptionType.CALL, false)

    return PreviewRequest(
        orderType = OrderType.CONDOR,
        clientOrderId = clientOrderId,
        orders = listOf(
            PreviewOrderLimit(
                limitPrice = limitPrice,
                priceType = OrderPriceType.NET_CREDIT,
                instruments = instruments
            )
        )
    )
}
