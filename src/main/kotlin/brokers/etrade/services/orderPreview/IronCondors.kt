package com.seansoper.batil.brokers.etrade.services.orderPreview

import com.seansoper.batil.OptionsCalendar
import com.seansoper.batil.brokers.etrade.api.OptionType
import com.seansoper.batil.brokers.etrade.api.OrderActionType
import com.seansoper.batil.brokers.etrade.api.OrderPriceType
import com.seansoper.batil.brokers.etrade.api.OrderType
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewInstrumentOption
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewOrderLimit
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewProductOption
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewRequest
import java.time.ZonedDateTime

/**
 * @suppress
 */
internal fun createIronCondorInstruments(
    symbol: String,
    lowerWing: Pair<Float, Float>,
    upperWing: Pair<Float, Float>,
    quantity: Int,
    expiry: ZonedDateTime,
    long: Boolean,
): List<PreviewInstrumentOption> {
    validateWings(lowerWing, upperWing)

    val strikes = listOf(lowerWing.toList(), upperWing.toList()).flatten()
    return strikes.mapIndexed { index, strike ->
        val action = when (index) {
            0, 3 -> if (long) { OrderActionType.SELL_OPEN } else { OrderActionType.BUY_OPEN }
            else -> if (long) { OrderActionType.BUY_OPEN } else { OrderActionType.SELL_OPEN }
        }

        val optionType = when (index) {
            0, 1 -> OptionType.PUT
            else -> OptionType.CALL
        }

        PreviewInstrumentOption(
            orderAction = action,
            quantity = quantity,
            product = PreviewProductOption(
                symbol,
                optionType,
                expiry,
                strike
            )
        )
    }
}
/**
 * Buy an iron condor
 * @param[symbol] The market symbol for the security being bought
 * @param[lowerWing] A pair of strike prices for the lower wing of the condor
 * @param[upperWing] A pair of strike prices for the upper wing of the condor
 * @param[limitPrice] The highest price at which to buy the iron condors
 * @param[quantity] The number of iron condors to buy
 * @param[expiry] The date the iron condor will expire
 * @param[clientOrderId] A reference ID generated by the developer that is used to ensure that a duplicate order is not being submitted. This reference ID may be any value of 20 or less alphanumeric characters but must be unique within the account. This field does not appear in any API responses.
 */
fun buyIronCondor(
    symbol: String,
    lowerWing: Pair<Float, Float>,
    upperWing: Pair<Float, Float>,
    limitPrice: Float,
    quantity: Int,
    expiry: ZonedDateTime = OptionsCalendar.nextMonthly(),
    clientOrderId: String = randomString()
): PreviewRequest {
    val instruments = createIronCondorInstruments(
        symbol,
        lowerWing,
        upperWing,
        quantity,
        expiry,
        true
    )

    return PreviewRequest(
        orderType = OrderType.IRON_CONDOR,
        clientOrderId = clientOrderId,
        orders = listOf(
            PreviewOrderLimit(
                limitPrice = limitPrice,
                priceType = OrderPriceType.NET_DEBIT,
                instruments = instruments
            )
        )
    )
}

/**
 * Sell an iron condor
 * @param[symbol] The market symbol for the security being sold
 * @param[lowerWing] A pair of strike prices for the lower wing of the condor
 * @param[upperWing] A pair of strike prices for the upper wing of the condor
 * @param[limitPrice] The highest price at which to sell the iron condors
 * @param[quantity] The number of iron condors to sell
 * @param[expiry] The date the iron condor will expire
 * @param[clientOrderId] A reference ID generated by the developer that is used to ensure that a duplicate order is not being submitted. This reference ID may be any value of 20 or less alphanumeric characters but must be unique within the account. This field does not appear in any API responses.
 * @sample com.seansoper.batil.samples.Orders.sellIronCondor
 */
fun sellIronCondor(
    symbol: String,
    lowerWing: Pair<Float, Float>,
    upperWing: Pair<Float, Float>,
    limitPrice: Float,
    quantity: Int,
    expiry: ZonedDateTime = OptionsCalendar.nextMonthly(),
    clientOrderId: String = randomString()
): PreviewRequest {
    val instruments = createIronCondorInstruments(
        symbol,
        lowerWing,
        upperWing,
        quantity,
        expiry,
        false
    )

    return PreviewRequest(
        orderType = OrderType.IRON_CONDOR,
        clientOrderId = clientOrderId,
        orders = listOf(
            PreviewOrderLimit(
                limitPrice = limitPrice,
                priceType = OrderPriceType.NET_CREDIT,
                instruments = instruments
            )
        )
    )
}
