package com.seansoper.batil.brokers.etrade.services.orderPreview

import com.seansoper.batil.brokers.etrade.api.OrderActionType
import com.seansoper.batil.brokers.etrade.api.OrderType
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewInstrumentEquity
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewOrderLimit
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewOrderMarket
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewProductEquity
import com.seansoper.batil.brokers.etrade.api.orderPreview.PreviewRequest

/**
 * Buy shares using a limit price
 * @param[symbol] The market symbol for the security being bought
 * @param[limitPrice] The highest price at which to buy if specified in a limit order
 * @param[quantity] The number of shares to buy
 * @param[clientOrderId] A reference ID generated by the developer that is used to ensure that a duplicate order is not being submitted. This reference ID may be any value of 20 or less alphanumeric characters but must be unique within the account. This field does not appear in any API responses.
 * @sample com.seansoper.batil.samples.Orders.buyEquityLimit
 */
fun buyEquityLimit(
    symbol: String,
    limitPrice: Float,
    quantity: Int,
    clientOrderId: String = randomString()
): PreviewRequest {

    return PreviewRequest(
        orderType = OrderType.EQ,
        clientOrderId = clientOrderId,
        orders = listOf(
            PreviewOrderLimit(
                limitPrice = limitPrice,
                instruments = listOf(
                    PreviewInstrumentEquity(
                        orderAction = OrderActionType.BUY,
                        quantity = quantity,
                        product = PreviewProductEquity(symbol)
                    )
                )
            )
        )
    )
}

/**
 * Sell shares using a limit price.
 * @param[symbol] The market symbol for the security being sold
 * @param[limitPrice] The lowest price at which to sell if specified in a limit order
 * @param[quantity] The number of shares to sell
 * @param[clientOrderId] A reference ID generated by the developer that is used to ensure that a duplicate order is not being submitted. This reference ID may be any value of 20 or less alphanumeric characters but must be unique within the account. This field does not appear in any API responses.
 * @sample com.seansoper.batil.samples.Orders.sellEquityLimit
 */
fun sellEquityLimit(
    symbol: String,
    limitPrice: Float,
    quantity: Int,
    clientOrderId: String = randomString()
): PreviewRequest {

    return PreviewRequest(
        orderType = OrderType.EQ,
        clientOrderId = clientOrderId,
        orders = listOf(
            PreviewOrderLimit(
                limitPrice = limitPrice,
                instruments = listOf(
                    PreviewInstrumentEquity(
                        orderAction = OrderActionType.SELL,
                        quantity = quantity,
                        product = PreviewProductEquity(symbol)
                    )
                )
            )
        )
    )
}

// TODO: Figure out if we actually need to pass limit/stop for market equity orders since both come back as zero in the response

/**
 * Buy shares using the market price.
 * @param[symbol] The market symbol for the security being bought
 * @param[limitPrice] The highest price at which to buy if specified in a limit order
 * @param[stopPrice] The designated boundary price for a stop order
 * @param[quantity] The number of shares to buy
 * @param[clientOrderId] A reference ID generated by the developer that is used to ensure that a duplicate order is not being submitted. This reference ID may be any value of 20 or less alphanumeric characters but must be unique within the account. This field does not appear in any API responses.
 */
fun buyEquityMarket(
    symbol: String,
    limitPrice: Float,
    stopPrice: Float,
    quantity: Int,
    clientOrderId: String = randomString()
): PreviewRequest {

    return PreviewRequest(
        orderType = OrderType.EQ,
        clientOrderId = clientOrderId,
        orders = listOf(
            PreviewOrderMarket(
                limitPrice = limitPrice,
                stopPrice = stopPrice,
                instruments = listOf(
                    PreviewInstrumentEquity(
                        orderAction = OrderActionType.BUY,
                        quantity = quantity,
                        product = PreviewProductEquity(symbol)
                    )
                )
            )
        )
    )
}

/**
 * Sell shares using the market price.
 * @param[symbol] The market symbol for the security being sold
 * @param[limitPrice] The lowest price at which to sell if specified in a limit order
 * @param[stopPrice] The designated boundary price for a stop order
 * @param[quantity] The number of shares to sell
 * @param[clientOrderId] A reference ID generated by the developer that is used to ensure that a duplicate order is not being submitted. This reference ID may be any value of 20 or less alphanumeric characters but must be unique within the account. This field does not appear in any API responses.
 */
fun sellEquityMarket(
    symbol: String,
    limitPrice: Float,
    stopPrice: Float,
    quantity: Int,
    clientOrderId: String = randomString()
): PreviewRequest {

    return PreviewRequest(
        orderType = OrderType.EQ,
        clientOrderId = clientOrderId,
        orders = listOf(
            PreviewOrderMarket(
                limitPrice = limitPrice,
                stopPrice = stopPrice,
                instruments = listOf(
                    PreviewInstrumentEquity(
                        orderAction = OrderActionType.SELL,
                        quantity = quantity,
                        product = PreviewProductEquity(symbol)
                    )
                )
            )
        )
    )
}
